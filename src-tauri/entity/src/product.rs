//! SeaORM Entity. Generated by sea-orm-codegen 0.3.2
use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use std::f64;
use crate::category;

#[derive(Clone, Debug, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "products")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub price: f64,
    pub cost: f64,
    pub stock: i32,
    pub description: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub deleted_at: Option<DateTime<Utc>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct QueryDto {
    pub id: i32,
    pub name: String,
    pub price: f64,
    pub cost: f64,
    pub stock: i32,
    pub categories: Vec<category::CommonDto>,
    pub description: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub deleted_at: Option<DateTime<Utc>>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct AddDto {
    pub name: String,
    pub price: f64,
    pub cost: f64,
    pub stock: i32,
    pub description: Option<String>,
    pub categories: Vec<category::CommonDto>,
}

#[derive(Debug, Clone, Deserialize)]
pub struct UpdateDto {
    pub id: i32,
    pub name: String,
    pub price: f64,
    pub cost: f64,
    pub stock: i32,
    pub description: Option<String>,
    pub categories: Vec<category::CommonDto>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CommonDto {
    pub id: i32,
    pub name: String,
}

#[derive(Debug, Deserialize)]
pub struct Filter {
    pub name: Option<String>,
    pub price: Option<f64>,
    pub cost: Option<f64>,
    pub stock: Option<i32>,
    pub deleted: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "crate::product_category::Entity")]
    ProductCategory,
}

impl Related<category::Entity> for Entity {
    fn to() -> RelationDef {
        crate::product_category::Relation::Category.def()
    }

    fn via() -> Option<RelationDef> {
        Some(Relation::ProductCategory.def())
    }
}



impl ActiveModelBehavior for ActiveModel {}
